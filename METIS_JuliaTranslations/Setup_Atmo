{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f39eee0f",
   "metadata": {},
   "outputs": [
    {
     "ename": "LoadError",
     "evalue": "ArgumentError: Package numpy not found in current path.\n- Run `import Pkg; Pkg.add(\"numpy\")` to install the numpy package.",
     "output_type": "error",
     "traceback": [
      "ArgumentError: Package numpy not found in current path.\n- Run `import Pkg; Pkg.add(\"numpy\")` to install the numpy package.",
      "",
      "Stacktrace:",
      " [1] macro expansion",
      "   @ ./loading.jl:1163 [inlined]",
      " [2] macro expansion",
      "   @ ./lock.jl:223 [inlined]",
      " [3] require(into::Module, mod::Symbol)",
      "   @ Base ./loading.jl:1144"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#from scipy.integrate import odeint\n",
    "#from absopac import *\n",
    "#from aerosols import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a86653dc-355e-40b1-9d95-d0a2f791b99d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.496e11"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# useful constants and conversions :\n",
    "G = 6.67408*10^-11       # SI units\n",
    "kb = 1.38064852*10^-23   # SI units\n",
    "c = 299792458.0           # m/s\n",
    "Mj = 1.898*10^27         # mass of jupiter in kg\n",
    "Rj = 6.9911*10^7.0       # radius of jupiter in m\n",
    "Rsun = 6.9551*10^8       # meters\n",
    "\n",
    "gmol_to_kg = 10.0^-3.0 / (6.022140857*10^23) \n",
    "pascals_to_bars = 10^-5\n",
    "bars_to_atm = 0.986923\n",
    "kgcm_to_gccm = 0.001 \n",
    "au_to_m = 1.496*10^11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcbf97fb-da3b-4295-93c0-58c1f485540b",
   "metadata": {},
   "outputs": [],
   "source": [
    "chempath = \"Tables/EqChemAbund\"\n",
    "gaspath = \"Tables/GasOpacity/\"\n",
    "miepath = \"Tables/Mie\"\n",
    "rayleighpath = \"Tables/Rayleigh\"\n",
    "# ----------------------------------------------------------------------------------------------\n",
    "# Pandexo calculations of JWST-like noise for objects in Keating et al 2019, Lacy & Burrows 2020\n",
    "# ----------------------------------------------------------------------------------------------\n",
    "errors = np.loadtxt('Tables/JWST_errors.dat',unpack=True)\n",
    "# ----------------------------------------------------------------------------------------------\n",
    "#  Default wavelengths to be used by the ~JWST-like Sims > MCMC retrieval pipeline\n",
    "# ----------------------------------------------------------------------------------------------\n",
    "WLRANGE = errors[0] # gasOpacFunc below will return this WLRANGE\n",
    "function gasOpacFunc(Z,T,P)\n",
    "    #=\n",
    "    expects T in Kelvin, P in pascals\n",
    "    expects T and P to be 1d arrays\n",
    "    of equal length\n",
    "    Z is expected as a multiple of Z-solar\n",
    "    a solar C/O ratio and thermochemical\n",
    "    equilibrium are assumed\n",
    "    =#\n",
    "    mu = mu_func(Z,T,P)\n",
    "    rho = eos_idealgas(P,mu*gmol_to_kg,T)\n",
    "    gas = gasopac_func(Z,WLRANGE,T,rho)\n",
    "    rayleigh = rayleigh_func(Z,WLRANGE,T,rho)\n",
    "    return gas + rayleigh # units are light blocked per m, has shape (nT, nwl) or (nwl,) if nT=1\n",
    "end"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.8.5",
   "language": "julia",
   "name": "julia-1.8"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
